"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[9942],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),k=p(a),d=l,m=k["".concat(o,".").concat(d)]||k[d]||c[d]||r;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},2016:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return u},default:function(){return k}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),i=["components"],s={sidebar_label:"builder",title:"builder"},o=void 0,p={unversionedId:"reference/builder",id:"reference/builder",isDocsHomePage:!1,title:"builder",description:"Handles the building/saving of the configurations from the Spock config classes",source:"@site/docs/reference/builder.md",sourceDirName:"reference",slug:"/reference/builder",permalink:"/spock/reference/builder",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/builder.md",tags:[],version:"current",frontMatter:{sidebar_label:"builder",title:"builder"},sidebar:"api",previous:{title:"wrappers",permalink:"/spock/reference/backend/wrappers"},next:{title:"exceptions",permalink:"/spock/reference/exceptions"}},u=[{value:"ConfigArgBuilder Objects",id:"configargbuilder-objects",children:[]}],c={toc:u};function k(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Handles the building/saving of the configurations from the Spock config classes"),(0,r.kt)("h2",{id:"configargbuilder-objects"},"ConfigArgBuilder Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ConfigArgBuilder()\n")),(0,r.kt)("p",null,"Automatically generates dataclass instances from config file(s)"),(0,r.kt)("p",null,"This class builds out necessary arguments from *args classes, reads\nthe arguments from specified config file(s), and subsequently (via chained\ncall to generate) generates each class instance based on the necessary\nfield values for each backend class instance"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_args")," - all command line args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_arg_namespace")," - generated argument namespace"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_builder_obj")," - instance of a BaseBuilder class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_dict_args")," - dictionary args from the command line"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_payload_obj")," - instance of a BasePayload class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_saver_obj")," - instance of a BaseSaver class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_tune_payload_obj")," - payload for tuner related objects -- instance of TunerPayload class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_tune_obj")," - instance of TunerBuilder class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_tuner_interface")," - interface that handles the underlying library for sampling -- instance of TunerInterface"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_tuner_state")," - current state of the hyper-parameter sampler"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_tune_namespace")," - namespace that hold the generated tuner related parameters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_sample_count")," - current call to the sample function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_fixed_uuid")," - fixed uuid to write the best file to the same path\n_configs = configs if configs is None else ","[Path(c) for c in configs]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_lazy")," - flag to lazily find @spock decorated classes registered within sys.modules",'["',"spock",'"]',".backend.config\nthus alleviating the need to pass all @spock decorated classes to *args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_no_cmd_line")," - turn off cmd line args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_desc")," - description for help"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_salt")," - salt use for crypto purposes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_key")," - key used for crypto purposes")),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(*args, *, configs: Optional[List] = None, desc: str = "", lazy: bool = False, no_cmd_line: bool = False, s3_config: Optional[_T] = None, key: Optional[Union[str, ByteString]] = None, salt: Optional[str] = None, **kwargs, ,)\n')),(0,r.kt)("p",null,"Init call for ConfigArgBuilder"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*args")," - tuple of spock decorated classes to process"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"configs")," - list of config paths"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"desc")," - description for help"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lazy")," - attempts to lazily find @spock decorated classes registered within sys.modules",'["',"spock",'"]',".backend.config\nas well as the parents of any lazily inherited @spock class thus alleviating the need to pass all\n@spock decorated classes to *args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"no_cmd_line")," - turn off cmd line args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt")," - either a path to a prior spock saved salt.yaml file or a string of the salt (can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - either a path to a prior spock saved key.yaml file, a ByteString of the key, or a str of the key\n(can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs")," - keyword args")),(0,r.kt)("h4",{id:"__call__"},"_","_","call","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __call__(*args, **kwargs) -> _T\n")),(0,r.kt)("p",null,"Call to self to allow chaining"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*args")," - non-keyword args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs")," - keyword args")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ConfigArgBuilder")," - self instance")),(0,r.kt)("h4",{id:"generate"},"generate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def generate() -> Spockspace\n")),(0,r.kt)("p",null,"Generate method that returns the actual argument namespace"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  argument namespace consisting of all config classes"),(0,r.kt)("h4",{id:"tuner_status"},"tuner","_","status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef tuner_status() -> Dict\n")),(0,r.kt)("p",null,"Returns a dictionary of all the necessary underlying tuner internals to\nreport the result"),(0,r.kt)("h4",{id:"best"},"best"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef best() -> Spockspace\n")),(0,r.kt)("p",null,"Returns a Spockspace of the best hyper-parameter config and the\nassociated metric value"),(0,r.kt)("h4",{id:"salt"},"salt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef salt()\n")),(0,r.kt)("p",null,"Returns the salt for crypto"),(0,r.kt)("h4",{id:"key"},"key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef key()\n")),(0,r.kt)("p",null,"Returns the key for crypto"),(0,r.kt)("h4",{id:"sample"},"sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sample() -> Spockspace\n")),(0,r.kt)("p",null,"Sample method that constructs a namespace from the fixed parameters and\nsamples from the tuner space to generate a Spockspace derived from both"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  argument namespace(s) -- fixed + drawn sample from tuner backend"),(0,r.kt)("h4",{id:"tuner"},"tuner"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def tuner(tuner_config: _T) -> _T\n")),(0,r.kt)("p",null,"Chained call that builds the tuner interface for either optuna or ax\ndepending upon the type of the tuner_obj"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tuner_config")," - a class of type optuna.study.Study or AX****")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  self so that functions can be chained"),(0,r.kt)("h4",{id:"_print_usage_and_exit"},"_","print","_","usage","_","and","_","exit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _print_usage_and_exit(msg: Optional[str] = None, sys_exit: bool = True, exit_code: int = 1) -> None\n")),(0,r.kt)("p",null,"Prints the help message and exits"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg")," - message to print pre exit")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  None"),(0,r.kt)("h4",{id:"_handle_tuner_objects"},"_","handle","_","tuner","_","objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_tuner_objects(tune_args: List, s3_config: Optional[_T], kwargs: Dict) -> Tuple\n")),(0,r.kt)("p",null,"Handles creating the tuner builder object if @spockTuner classes were passed in"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tune_args")," - list of tuner classes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kwargs")," - optional keyword args")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  tuner builder object or None"),(0,r.kt)("h4",{id:"_verify_attr"},"_","verify","_","attr"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _verify_attr(args: Tuple) -> None\n")),(0,r.kt)("p",null,"Verifies that all the input classes are attr based"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - tuple of classes passed to the builder")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  None"),(0,r.kt)("h4",{id:"_strip_tune_parameters"},"_","strip","_","tune","_","parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _strip_tune_parameters(args: Tuple) -> Tuple[List, List]\n")),(0,r.kt)("p",null,"Separates the fixed arguments from any hyper-parameter arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - tuple of classes passed to the builder")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fixed_args")," - list of fixed args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tune_args")," - list of args destined for a tuner backend")),(0,r.kt)("h4",{id:"_handle_cmd_line"},"_","handle","_","cmd","_","line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_cmd_line() -> argparse.Namespace\n")),(0,r.kt)("p",null,"Handle all cmd line related tasks"),(0,r.kt)("p",null,"Config paths can enter from either the command line or be added in the class\ninit call as a kwarg (configs=[]) -- also trigger the building of the cmd\nline overrides  for each fixed and tunable objects"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - namespace of args")),(0,r.kt)("h4",{id:"_build_override_parsers"},"_","build","_","override","_","parsers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _build_override_parsers(desc: str) -> argparse.Namespace\n")),(0,r.kt)("p",null,"Creates parsers for command-line overrides"),(0,r.kt)("p",null,"Builds the basic command line parser for configs and help then iterates through\neach attr instance to make\nnamespace specific cmd line override parsers -- handles calling both the fixed\nand tunable objects"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"desc")," - argparser description")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - argument namespace")),(0,r.kt)("h4",{id:"_get_from_kwargs"},"_","get","_","from","_","kwargs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_from_kwargs(args: argparse.Namespace, configs: List)\n")),(0,r.kt)("p",null,"Get configs from the configs kwarg"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - argument namespace"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"configs")," - config kwarg")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - arg namespace")),(0,r.kt)("h4",{id:"_get_payload"},"_","get","_","payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _get_payload(payload_obj: Type[AttrPayload], input_classes: Tuple, ignore_args: List) -> Dict\n")),(0,r.kt)("p",null,"Get the parameter payload from the config file(s)"),(0,r.kt)("p",null,"Calls the various ways to get configs and then parses to retrieve the parameter payload - make sure to call\ndeep update so as to not lose some parameters when only partially updating the payload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload_obj")," - current payload object to call"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_classes")," - classes to use to get payload"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_args")," - args that were decorated for hyper-parameter tuning")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - dictionary of parameter values")),(0,r.kt)("h4",{id:"_save"},"_","save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def _save(payload: Spockspace, file_name: str = None, user_specified_path: Path = None, create_save_path: bool = True, extra_info: bool = True, file_extension: str = ".yaml", tuner_payload: Optional[Spockspace] = None, fixed_uuid: str = None) -> _T\n')),(0,r.kt)("p",null,"Private interface -- saves the current config setup to file with a UUID"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - Spockspace to save"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_name")," - name of file (will be appended with .spock.cfg.file_extension) -- falls back to just uuid if None"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_specified_path")," - if user provides a path it will be used as the path to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_save_path")," - bool to create the path to save if called"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extra_info")," - additional info to write to saved config (run date and git info)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_extension")," - file type to write (default: yaml)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tuner_payload")," - tuner level payload (unsampled)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fixed_uuid")," - fixed uuid to allow for file overwrite")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  self so that functions can be chained"),(0,r.kt)("h4",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def save(file_name: str = None, user_specified_path: Union[Path, str] = None, create_save_path: bool = True, extra_info: bool = True, file_extension: str = ".yaml", add_tuner_sample: bool = False) -> _T\n')),(0,r.kt)("p",null,"Saves the current config setup to file with a UUID"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_name")," - name of file (will be appended with .spock.cfg.file_extension) -- falls back to just uuid if None"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_specified_path")," - if user provides a path it will be used as the path to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_save_path")," - bool to create the path to save if called"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extra_info")," - additional info to write to saved config (run date and git info)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_extension")," - file type to write (default: yaml)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"add_tuner_sample")," - save the current tuner sample to the payload")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  self so that functions can be chained"),(0,r.kt)("h4",{id:"save_best"},"save","_","best"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def save_best(file_name: str = None, user_specified_path: Path = None, create_save_path: bool = True, extra_info: bool = True, file_extension: str = ".yaml") -> _T\n')),(0,r.kt)("p",null,"Saves the current best config setup to file"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_name")," - name of file (will be appended with .spock.cfg.file_extension) -- falls back to just uuid if None"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_specified_path")," - if user provides a path it will be used as the path to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_save_path")," - bool to create the path to save if called"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extra_info")," - additional info to write to saved config (run date and git info)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_extension")," - file type to write (default: yaml)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  self so that functions can be chained"),(0,r.kt)("h4",{id:"config_2_dict"},"config","_","2","_","dict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef config_2_dict() -> Dict\n")),(0,r.kt)("p",null,"Dictionary representation of the arg payload"),(0,r.kt)("h4",{id:"spockspace_2_dict"},"spockspace","_","2","_","dict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def spockspace_2_dict(payload: Spockspace) -> Dict\n")),(0,r.kt)("p",null,"Converts an input SpockSpace into a dictionary"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - SpockSpace generated by the ConfigArgBuilder")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  dictionary representation of the SpockSpace"),(0,r.kt)("h4",{id:"obj_2_dict"},"obj","_","2","_","dict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def obj_2_dict(obj: Union[_C, List[_C], Tuple[_C, ...]]) -> Dict[str, Dict]\n")),(0,r.kt)("p",null,"Converts spock classes from a Spockspace into their dictionary representations"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"objs")," - single spock class or an iterable of spock classes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  dictionary where the class names are keys and the values are the dictionary representations"),(0,r.kt)("h4",{id:"evolve"},"evolve"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def evolve(*args: _C) -> Spockspace\n")),(0,r.kt)("p",null,"Function that allows a user to evolve the underlying spock classes with\ninstantiated spock objects"),(0,r.kt)("p",null,"This will map the differences between the passed in instantiated objects and the underlying class definitions\nto the underlying namespace -- this essentially allows you to ","'","evolve","'"," the Spockspace similar to how attrs\nallows for class evolution -- returns a new Spockspace object"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*args")," - variable number of instantiated @spock decorated classes to evolve parameters with")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"new_arg_namespace")," - Spockspace evolved with *arg @spock decorated classes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Raises"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_SpockEvolveError")," - if multiple of the same instance are passed as input or if the one or more of the inputs\nare not within the set of original input classes")),(0,r.kt)("h4",{id:"_recurse_upwards"},"_","recurse","_","upwards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _recurse_upwards(new_arg_namespace: Spockspace, current_cls: str, all_cls: Dict) -> Tuple[Spockspace, Dict]\n")),(0,r.kt)("p",null,"Using the underlying graph work recurse upwards through the parents and swap in the correct values"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"new_arg_namespace")," - new Spockspace object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"current_cls")," - current name of the cls"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"all_cls")," - dict of the variable number of @spock decorated classes to evolve parameters with")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  modified new_arg_namespace and the updated evolve class dict"),(0,r.kt)("h4",{id:"_set_matching_attrs_by_name_args"},"_","set","_","matching","_","attrs","_","by","_","name","_","args"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _set_matching_attrs_by_name_args(current_cls_name: str, parent_cls_name: str, all_cls: Dict) -> Dict\n")),(0,r.kt)("p",null,"Sets the value of an attribute by matching it to a spock class name"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"current_cls_name")," - current name of the changed class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent_cls_name")," - name of the parent class that contains a reference to the current class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"all_cls")," - dict of the variable number of @spock decorated classes to evolve parameters with")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  modified all_cls dictionary"),(0,r.kt)("h4",{id:"_set_matching_attrs_by_name"},"_","set","_","matching","_","attrs","_","by","_","name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _set_matching_attrs_by_name(new_arg_namespace: Spockspace, current_cls_name: str, parent_cls_name: str) -> Spockspace\n")),(0,r.kt)("p",null,"Sets the value of an attribute by matching it to a spock class name"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"new_arg_namespace")," - new Spockspace object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"current_cls_name")," - current name of the changed class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent_cls_name")," - name of the parent class that contains a reference to the current class")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  modified new_arg_namespace"),(0,r.kt)("h4",{id:"_maybe_crypto"},"_","maybe","_","crypto"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _maybe_crypto(key: Optional[Union[str, ByteString]], salt: Optional[str], s3_config: Optional[_T] = None, salt_len: int = 16) -> Tuple[str, ByteString]\n")),(0,r.kt)("p",null,"Handles setting up the underlying cryptography needs"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt")," - either a path to a prior spock saved salt.yaml file or a string of the salt (can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - either a path to a prior spock saved key.yaml file, a ByteString of the key, or a str of the key\n(can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt_len")," - length of the salt to create")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  tuple containing a salt and a key that spock can use to hide parameters"),(0,r.kt)("h4",{id:"_get_salt"},"_","get","_","salt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _get_salt(salt: Optional[str], env_resolver: EnvResolver, salt_len: int, s3_config: Optional[_T] = None) -> str\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt")," - either a path to a prior spock saved salt.yaml file or a string of the salt (can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"env_resolver")," - EnvResolver class to handle env variable resolution if needed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt_len")," - length of the salt to create"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  salt as a string"),(0,r.kt)("h4",{id:"_get_key"},"_","get","_","key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _get_key(key: Optional[Union[str, ByteString]], env_resolver: EnvResolver, s3_config: Optional[_T] = None) -> ByteString\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - either a path to a prior spock saved key.yaml file, a ByteString of the key, or a str of the key\n(can be an env reference)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"env_resolver")," - EnvResolver class to handle env variable resolution if needed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  key as ByteString"),(0,r.kt)("h4",{id:"_handle_yaml_read"},"_","handle","_","yaml","_","read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_yaml_read(value: str, access: str, s3_config: Optional[_T] = None, encode: bool = False) -> Union[str, ByteString]\n")),(0,r.kt)("p",null,"Reads in a salt/key yaml"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," - path to the key/salt yaml"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"access")," - which variable name to use from the yaml"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3Config object for S3 support")))}k.isMDXComponent=!0}}]);