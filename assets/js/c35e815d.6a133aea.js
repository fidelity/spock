"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2626],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return v}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),p=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(t),v=a,u=f["".concat(i,".").concat(v)]||f[v]||d[v]||r;return t?o.createElement(u,l(l({ref:n},c),{},{components:t})):o.createElement(u,l({ref:n},c))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5745:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],s={},i="Resolvers",p={unversionedId:"advanced_features/Resolvers",id:"advanced_features/Resolvers",isDocsHomePage:!1,title:"Resolvers",description:"spock currently supports the resolver notation(s) .env and .var with",source:"@site/docs/advanced_features/Resolvers.md",sourceDirName:"advanced_features",slug:"/advanced_features/Resolvers",permalink:"/spock/advanced_features/Resolvers",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/advanced_features/Resolvers.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Evolve",permalink:"/spock/advanced_features/Evolve"},next:{title:"S3 Support",permalink:"/spock/addons/S3"}},c=[{value:"Variable Resolver",id:"variable-resolver",children:[]},{value:"Environment Resolver",id:"environment-resolver",children:[]},{value:"Inject Annotation",id:"inject-annotation",children:[]},{value:"Cryptographic Annotation",id:"cryptographic-annotation",children:[]}],d={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"resolvers"},"Resolvers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," currently supports the resolver notation(s) ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".var")," with\ntwo annotations ",(0,r.kt)("inlineCode",{parentName:"p"},".crypto")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".inject")," for ",(0,r.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,r.kt)("h3",{id:"variable-resolver"},"Variable Resolver"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," supports resolving value definitions from other defined variable definitions with the\nfollowing syntax, ",(0,r.kt)("inlineCode",{parentName:"p"},"${spock.var:RefClass.ref_value}"),".This will set the value from the\nvalue set within the referenced class and attribute. In addition, ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," supports using\nmultiple references within the definition such as,\n",(0,r.kt)("inlineCode",{parentName:"p"},"version-${spock.var:RefClass.ref_value1}-${spock.var:RefClass.ref_value2}")," which will\nresolve both references. Currently, variable resolution only supports simple\ntypes: ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),". For example, let's define a bunch of\nparameters that will rely on the variable resolver:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock import SpockBuilder\n\nfrom typing import Optional\nimport os\n\n\n@spock\nclass Lastly:\n    ooooyah: int = 12\n    tester: int = 1\n    hiyah: bool = True\n\n\n@spock\nclass BarFoo:\n    newval: Optional[int] = 2\n    moreref: int = "${spock.var:Lastly.ooooyah}"\n\n\n@spock\nclass FooBar:\n    val: int = 12\n\n\n@spock\nclass RefClass:\n    a_float: float = 12.1\n    a_int: int = 3\n    a_bool: bool = True\n    a_string: str = "helloo"\n\n\n@spock\nclass RefClassFile:\n    ref_float: float\n    ref_int: int\n    ref_bool: bool\n    ref_string: str\n    ref_nested_to_str: str\n    ref_nested_to_float: float\n\n\n@spock\nclass RefClassOptionalFile:\n    ref_float: Optional[float]\n    ref_int: Optional[int]\n    ref_bool: Optional[bool]\n    ref_string: Optional[str]\n    ref_nested_to_str: Optional[str]\n    ref_nested_to_float: Optional[float]\n\n\n@spock\nclass RefClassDefault:\n    ref_float: float = "${spock.var:RefClass.a_float}"\n    ref_int: int = "${spock.var:RefClass.a_int}"\n    ref_bool: bool = "${spock.var:RefClass.a_bool}"\n    ref_string: str = "${spock.var:RefClass.a_string}"\n    ref_nested_to_str: str = "${spock.var:FooBar.val}.${spock.var:Lastly.tester}"\n    ref_nested_to_float: float = "${spock.var:FooBar.val}.${spock.var:Lastly.tester}"\n')),(0,r.kt)("p",null,"These demonstrate the basic paradigms of variable references as well as the ability to\nuse multiple variable references within a single definition. The returned\n",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"BarFoo: !!python/object:spock.backend.config.BarFoo\n  moreref: 12\n  newval: 2\nFooBar: !!python/object:spock.backend.config.FooBar\n  val: 12\nLastly: !!python/object:spock.backend.config.Lastly\n  hiyah: true\n  ooooyah: 12\n  tester: 1\nRefClass: !!python/object:spock.backend.config.RefClass\n  a_bool: true\n  a_float: 12.1\n  a_int: 3\n  a_string: helloo\nRefClassDefault: !!python/object:spock.backend.config.RefClassDefault\n  ref_bool: true\n  ref_float: 12.1\n  ref_int: 3\n  ref_nested_to_float: 12.1\n  ref_nested_to_str: '12.1'\n  ref_string: helloo\n")),(0,r.kt)("h3",{id:"environment-resolver"},"Environment Resolver"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," supports resolving value definitions from environmental variables with the following syntax,\n",(0,r.kt)("inlineCode",{parentName:"p"},"${spock.env:name, default}"),". This will read the value from the named env variable and fall back on the default if\nspecified. Currently, environmental variable resolution only supports simple types: ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),". For example, let's define a bunch of parameters that will rely on the environment resolver:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock import SpockBuilder\n\nfrom typing import Optional\nimport os\n\n# Set some ENV variables here just as an example -- these can/should already be defined in your local/cluster env\nos.environ[\'INT_ENV\'] = "2"\nos.environ[\'FLOAT_ENV\'] = "2.0"\nos.environ["BOOL_ENV"] = "true"\nos.environ["STRING_ENV"] = "boo"\n\n\n@spock\nclass EnvClass:\n    # Basic types no defaults\n    env_int: int = "${spock.env:INT_ENV}"\n    env_float: float = "${spock.env:FLOAT_ENV}"\n    env_bool: bool = "${spock.env:BOOL_ENV}"\n    env_str: str = "${spock.env:STRING_ENV}"\n    # Basic types w/ defaults\n    env_int_def: int = "${spock.env:INT_DEF, 3}"\n    env_float_def: float = "${spock.env:FLOAT_DEF, 3.0}"\n    env_bool_def: bool = "${spock.env:BOOL_DEF, True}"\n    env_str_def: str = "${spock.env:STRING_DEF, hello}"\n    # Basic types allowing None as default\n    env_int_def_opt: Optional[int] = "${spock.env:INT_DEF, None}"\n    env_float_def_opt: Optional[float] = "${spock.env:FLOAT_DEF, None}"\n    env_bool_def_opt: Optional[bool] = "${spock.env:BOOL_DEF, False}"\n    env_str_def_opt: Optional[str] = "${spock.env:STRING_DEF, None}"\n\nconfig = SpockBuilder(EnvClass).generate().save(user_specified_path=\'/tmp\')\n')),(0,r.kt)("p",null,"These demonstrate the three common paradigms: (1) read from an env variable and if not present throw an exception since\nno default is defined, (2) read from an env variable and if not present fallback on the given default value, (3) read\nfrom an optional env variable and fallback on None or False if not present (i.e. optional values). The returned\n",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"EnvClass: !!python/object:spock.backend.config.EnvClass\n  env_bool: true\n  env_bool_def: true\n  env_bool_def_opt: false\n  env_float: 2.0\n  env_float_def: 3.0\n  env_float_def_opt: null\n  env_int: 2\n  env_int_def: 3\n  env_int_def_opt: null\n  env_str: boo\n  env_str_def: hello\n  env_str_def_opt: null\n")),(0,r.kt)("p",null,"and the saved output YAML (from the ",(0,r.kt)("inlineCode",{parentName:"p"},".save")," call) would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"EnvClass:\n  env_bool: true\n  env_bool_def: true\n  env_bool_def_opt: false\n  env_float: 2.0\n  env_float_def: 3.0\n  env_int: 2\n  env_int_def: 3\n  env_str: boo\n  env_str_def: hello\n")),(0,r.kt)("h3",{id:"inject-annotation"},"Inject Annotation"),(0,r.kt)("p",null,"In some cases you might want to save the configuration state with the same references to the env variables that you\ndefined the parameters with instead of the resolved variables. This is available via the ",(0,r.kt)("inlineCode",{parentName:"p"},".inject")," annotation that\ncan be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," notation. For instance, let's change a few of the definitions above to use the ",(0,r.kt)("inlineCode",{parentName:"p"},".inject"),"\nannotation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock import SpockBuilder\n\nfrom typing import Optional\nimport os\n\n# Set some ENV variables here just as an example -- these can/should already be defined in your local/cluster env\nos.environ[\'INT_ENV\'] = "2"\nos.environ[\'FLOAT_ENV\'] = "2.0"\nos.environ["BOOL_ENV"] = "true"\nos.environ["STRING_ENV"] = "boo"\n\n\n@spock\nclass EnvClass:\n    # Basic types no defaults\n    env_int: int = "${spock.env:INT_ENV}"\n    env_float: float = "${spock.env:FLOAT_ENV}"\n    env_bool: bool = "${spock.env:BOOL_ENV}"\n    env_str: str = "${spock.env:STRING_ENV}"\n    # Basic types w/ defaults    env_int_def: int = "${spock.env.inject:INT_DEF, 3}"\n    env_float_def: float = "${spock.env.inject:FLOAT_DEF, 3.0}"\n    env_bool_def: bool = "${spock.env.inject:BOOL_DEF, True}"\n    env_str_def: str = "${spock.env.inject:STRING_DEF, hello}"\n    # Basic types allowing None as default\n    env_int_def_opt: Optional[int] = "${spock.env:INT_DEF, None}"\n    env_float_def_opt: Optional[float] = "${spock.env:FLOAT_DEF, None}"\n    env_bool_def_opt: Optional[bool] = "${spock.env:BOOL_DEF, False}"\n    env_str_def_opt: Optional[str] = "${spock.env:STRING_DEF, None}"\n\nconfig = SpockBuilder(EnvClass).generate().save(user_specified_path=\'/tmp\')\n')),(0,r.kt)("p",null,"The returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," within Python would still be the same as above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"EnvClass: !!python/object:spock.backend.config.EnvClass\n  env_bool: true\n  env_bool_def: true\n  env_bool_def_opt: false\n  env_float: 2.0\n  env_float_def: 3.0\n  env_float_def_opt: null\n  env_int: 2\n  env_int_def: 3\n  env_int_def_opt: null\n  env_str: boo\n  env_str_def: hello\n  env_str_def_opt: null\n")),(0,r.kt)("p",null,"However, the saved output YAML (from the ",(0,r.kt)("inlineCode",{parentName:"p"},".save")," call) would change to a version where the values of those annotated\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},".inject")," annotation will fall back to the env syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"EnvClass:\n  env_bool: true\n  env_bool_def: ${spock.env.inject:BOOL_DEF, True}\n  env_bool_def_opt: false\n  env_float: 2.0\n  env_float_def: ${spock.env.inject:FLOAT_DEF, 3.0}\n  env_int: 2\n  env_int_def: ${spock.env.inject:INT_DEF, 3}\n  env_str: boo\n  env_str_def: ${spock.env.inject:STRING_DEF, hello}\n")),(0,r.kt)("h3",{id:"cryptographic-annotation"},"Cryptographic Annotation"),(0,r.kt)("p",null,"Sometimes environmental variables within a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," definitions and ",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," output might contain sensitive\ninformation (i.e. a lot of cloud infra use env variables that might contain passwords, internal DNS domains, etc.) that\nshouldn't be stored in simple plaintext. The ",(0,r.kt)("inlineCode",{parentName:"p"},".crypto")," annotation provides a simple way to hide these sensitive\nvariables while still maintaining the written/loadable state of the spock config by 'encrypting' annotated values. "),(0,r.kt)("p",null,"For example, let's define a parameter that will rely on the environment resolver but contains sensitive information\nsuch that we don't want to store it in plaintext (so we add the ",(0,r.kt)("inlineCode",{parentName:"p"},".crypto")," annotation):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock import SpockBuilder\nimport os\n\n# Set some ENV variables here just as an example -- these can/should already be defined in your local/cluster env\nos.environ[\'PASSWORD\'] = "youshouldntseeme!"\n\n\n@spock\nclass SecretClass:\n    # Basic types w/ defaults    env_int_def: int = "${spock.env.inject:INT_DEF, 3}"\n    env_float_def: float = "${spock.env.inject:FLOAT_DEF, 3.0}"\n    env_bool_def: bool = "${spock.env.inject:BOOL_DEF, True}"\n    env_str_def: str = "${spock.env.inject:STRING_DEF, hello}"\n    # A value that needs to be \'encrypted\'\n    env_password: str = "${spock.env.crypto:PASSWORD}"\n\nconfig = SpockBuilder(SecretClass).generate().save(user_specified_path=\'/tmp\')\n')),(0,r.kt)("p",null,"The returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," within Python would contain plaintext information for use within code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"SecretClass: !!python/object:spock.backend.config.SecretClass\n  env_bool_def: true\n  env_float_def: 3.0\n  env_password: youshouldntseeme!\n  env_str_def: hello\n")),(0,r.kt)("p",null,"However, the saved output YAML (from the ",(0,r.kt)("inlineCode",{parentName:"p"},".save")," call) would change to a version where the values of those values\nannotated with the ",(0,r.kt)("inlineCode",{parentName:"p"},".crypto")," annotation will be encrypted with a salt and key (via\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pyca/cryptography"},"Cryptography"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"SecretClass:\n  env_bool_def: ${spock.env.inject:BOOL_DEF, True}\n  env_float_def: ${spock.env.inject:FLOAT_DEF, 3.0}\n  env_password: ${spock.crypto:gAAAAABig8FexSFATx1hdYZa_Knk8wfS2KSb8ylqFWTcfBsC_1nprKK4_G6EI9hMAJ7C39sxDWMMEGlKBfeYsb_NTTCTeaRmlxO3T37_AlAwCWfgG0cnzmyZaTctquKRNc6RnKL8VK2m}\n  env_str_def: ${spock.env.inject:STRING_DEF, hello}\n")),(0,r.kt)("p",null,"Additionally, two extra files will be written to file: a YAML containing the salt (",(0,r.kt)("inlineCode",{parentName:"p"},"*.spock.cfg.salt.yaml"),") and another\nYAML containing the key (",(0,r.kt)("inlineCode",{parentName:"p"},"*.spock.cfg.key.yaml"),"). These files contain the salt and key that were used to encrypt values\nannotated with ",(0,r.kt)("inlineCode",{parentName:"p"},".crypto"),"."),(0,r.kt)("p",null,"In order to use the 'encrypted' versions of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," parameters (from a config file or as a given default within the\ncode) the ",(0,r.kt)("inlineCode",{parentName:"p"},"salt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," used to encrypt the value must be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"SpockBuilder")," as keyword args. For\ninstance, let's use the output from above (here we set the default value for instructional purposes, but this could\nalso be the value in a configuration file):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock import SpockBuilder\nimport os\n\n# Set some ENV variables here just as an example -- these can/should already be defined in your local/cluster env\nos.environ[\'PASSWORD\'] = "youshouldntseeme!"\n\n\n@spock\nclass SecretClass:\n    # Basic types w/ defaults    env_int_def: int = "${spock.env.inject:INT_DEF, 3}"\n    env_float_def: float = "${spock.env.inject:FLOAT_DEF, 3.0}"\n    env_bool_def: bool = "${spock.env.inject:BOOL_DEF, True}"\n    env_str_def: str = "${spock.env.inject:STRING_DEF, hello}"\n    # A value that needs to be \'encrypted\' -- here we \n    env_password: str = "${spock.crypto:gAAAAABig8FexSFATx1hdYZa_Knk8wfS2KSb8ylqFWTcfBsC_1nprKK4_G6EI9hMAJ7C39sxDWMMEGlKBfeYsb_NTTCTeaRmlxO3T37_AlAwCWfgG0cnzmyZaTctquKRNc6RnKL8VK2m}"\n\nconfig = SpockBuilder(\n    SecretClass,\n    key="/path/to/file/b4635a04-7fba-42f7-9257-04532a4715fd.spock.cfg.key.yaml",\n    salt="/path/to/file/b4635a04-7fba-42f7-9257-04532a4715fd.spock.cfg.salt.yaml"\n).generate()\n')),(0,r.kt)("p",null,"Here we pass in the path to the YAML files that contain the ",(0,r.kt)("inlineCode",{parentName:"p"},"salt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"SpockBuilder")," which allows the\n'encrypted' values to be 'decrypted' and used within code. The returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Spockspace")," would be exactly as before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"SecretClass: !!python/object:spock.backend.config.SecretClass\n  env_bool_def: true\n  env_float_def: 3.0\n  env_password: youshouldntseeme!\n  env_str_def: hello\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"salt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," can also be directly specified from a ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ByteString")," accordingly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"config = SpockBuilder(\n    SecretClass,\n    key=b'9DbRPjN4B_aRBZjfhIgDUnzYLQcmK2gGURhmIDtamSA=',\n    salt=\"NrnNndAEbXD2PT6n\"\n).generate()\n")),(0,r.kt)("p",null,"or the ",(0,r.kt)("inlineCode",{parentName:"p"},"salt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," can be specified as environmental variables which will then be resolved by the environment\nresolver:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"config = SpockBuilder(\n    SecretClass,\n    key='${spock.env:KEY}',\n    salt=\"${spock.env:SALT}\"\n).generate()\n")))}f.isMDXComponent=!0}}]);