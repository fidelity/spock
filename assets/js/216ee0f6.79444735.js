"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[5713],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1923:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={},s="Define",p={unversionedId:"basics/Define",id:"basics/Define",isDocsHomePage:!1,title:"Define",description:"spock manages complex configurations via a class based solution. All parameters are defined in a class or",source:"@site/docs/basics/Define.md",sourceDirName:"basics",slug:"/basics/Define",permalink:"/spock/basics/Define",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/basics/Define.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"The Basics of Spock",permalink:"/spock/basics/About"},next:{title:"Build",permalink:"/spock/basics/Building"}},c=[{value:"Supported Parameter Types",id:"supported-parameter-types",children:[]},{value:"Defining a spock Class",id:"defining-a-spock-class",children:[]},{value:"Adding Help Information",id:"adding-help-information",children:[]},{value:"Using spock Parameters: Writing More Code",id:"using-spock-parameters-writing-more-code",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"define"},"Define"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," manages complex configurations via a class based solution. All parameters are defined in a class or\nmultiple classes decorated using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@spock")," decorator. Parameters are defined with base types or those defined within\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"typing")," module and are type checked at run time. Once built, all parameters can be found within an automatically\ngenerated namespace object that contains each class that can be accessed with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"@spock")," class name."),(0,r.kt)("p",null,"All examples can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fidelity/spock/blob/master/examples"},"here"),"."),(0,r.kt)("h3",{id:"supported-parameter-types"},"Supported Parameter Types"),(0,r.kt)("h4",{id:"basic-types"},"Basic Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," supports the following basic argument types (note ",(0,r.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Tuple"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," are defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"typing"),"\nstandard library while ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," is within the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," standard library) as well as some custom\ntypes:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Python Base or Typing Type (Required)"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[bool]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic boolean parameter (e.g. True)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[float]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic float type parameter (e.g. 10.2)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[int]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic integer type parameter (e.g. 2)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[str]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic string type parameter (e.g. 'foo')")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"file"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[file]"),(0,r.kt)("td",{parentName:"tr",align:null},"Overload of string that verifies file existence and (r/w) access")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"directory"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[directory]"),(0,r.kt)("td",{parentName:"tr",align:null},"overload of a str that verifies directory existence, creation if not existing, and (r/w) access")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Callable"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[Callable]"),(0,r.kt)("td",{parentName:"tr",align:null},"Any callable type (e.g. my_func)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"List","[type]"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional[List","[type]","]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic list type parameter of base types such as int, float, etc. (e.g. ","[10.0, 2.0]",")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple","[type]"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional[Tuple","[type]","]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic tuple type parameter of base types such as int, float, etc. Length enforced unlike List. (e.g. (10, 2))")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dict","[type]"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional[Dict","[type]","]"),(0,r.kt)("td",{parentName:"tr",align:null},"Basic dict type parameter where both key (str only for valid TOML/JSON) and value types are specified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[Enum]"),(0,r.kt)("td",{parentName:"tr",align:null},"Parameter that must be from a defined set of values of base types such as int, float, etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@spock decorated Class"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional","[Class]"),(0,r.kt)("td",{parentName:"tr",align:null},"Parameter that is a reference to another @spock decorated class")))),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," types when the length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Iterable")," is not fixed and ",(0,r.kt)("inlineCode",{parentName:"p"},"Tuple")," when length needs to be strictly enforced."),(0,r.kt)("p",null,"Parameters that are specified without the ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional[]")," type will be considered ",(0,r.kt)("strong",{parentName:"p"},"REQUIRED")," and therefore will raise an\nException if not value is specified. "),(0,r.kt)("h4",{id:"advanced-types"},"Advanced Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," supports more than just basic types. More information can be found in\nthe ",(0,r.kt)("a",{parentName:"p",href:"/spock/advanced_features/Advanced-Types"},"Advanced Types")," section."),(0,r.kt)("h3",{id:"defining-a-spock-class"},"Defining a spock Class"),(0,r.kt)("p",null,"Let's start building out an example (a simple neural net in PyTorch) that we will continue to use within the tutorial:\n",(0,r.kt)("inlineCode",{parentName:"p"},"tutorial.py")),(0,r.kt)("p",null,"Here we import the basic units of functionality from ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". We define our class using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@spock"),"\ndecorator and define our parameters with supported argument types. Parameters are defined within\nthe class by using the format ",(0,r.kt)("inlineCode",{parentName:"p"},"parameter: type"),". Note that to create a parameter that is required to be within a\nspecified set one must first define an ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," class object with the given options. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," class is then passed to\nyour ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," class just like other types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from enum import Enum\nfrom spock import spock\nfrom typing import List\nfrom typing import Tuple\n\n\nclass Activation(Enum):\n    relu = 'relu'\n    gelu = 'gelu'\n    tanh = 'tanh'\n\n\n@spock\nclass ModelConfig:\n    n_features: int\n    dropout: List[float]\n    hidden_sizes: Tuple[int, int, int]\n    activation: Activation\n")),(0,r.kt)("h3",{id:"adding-help-information"},"Adding Help Information"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," uses the ",(0,r.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"},"Google")," docstring style\nformat to support adding help information to classes and Enums. ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," will look for the first contiguous line of text\nwithin the docstring as the class help information. ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," looks within the ",(0,r.kt)("inlineCode",{parentName:"p"},"Attributes")," section of the docstring\nfor help information for each parameter. Modifying the above code to include help information:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from enum import Enum\nfrom spock.config import spock\nfrom typing import List\nfrom typing import Tuple\n\nclass Activation(Enum):\n    """Options for activation functions\n\n    Attributes:\n        relu: relu activation\n        gelu: gelu activation\n        tanh: tanh activation\n    """\n    relu = \'relu\'\n    gelu = \'gelu\'\n    tanh = \'tanh\'\n\n\n@spock\nclass ModelConfig:\n    """Main model configuration for a basic neural net\n\n    Attributes:\n        n_features: number of data features\n        dropout: dropout rate for each layer\n        hidden_sizes: hidden size for each layer\n        activation: choice from the Activation enum of the activation function to use\n    """\n    n_features: int\n    dropout: List[float]\n    hidden_sizes: Tuple[int, int, int]\n    activation: Activation\n')),(0,r.kt)("p",null,"If we run our ",(0,r.kt)("inlineCode",{parentName:"p"},"tutorial.py")," script with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--help")," flag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python tutorial.py --help\n")),(0,r.kt)("p",null,"We should see the help information we added to the docstring(s):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"usage: /Users/a635179/Documents/git_repos/open_source/spock/examples/tutorial/basic/tutorial.py -c [--config] config1 [config2, config3, ...]\n\nspock Basic Tutorial\n\nconfiguration(s):\n\n  ModelConfig (Main model configuration for a basic neural net)\n    n_features      int                     number of data features \n    dropout         List[float]             dropout rate for each layer \n    hidden_sizes    Tuple[int, int, int]    hidden size for each layer \n    activation      Activation              choice from the Activation enum of the activation function to use \n\n  Activation (Options for activation functions)\n    relu    str    relu activation \n    gelu    str    gelu activation \n    tanh    str    tanh activation \n")),(0,r.kt)("h3",{id:"using-spock-parameters-writing-more-code"},"Using spock Parameters: Writing More Code"),(0,r.kt)("p",null,"In another file let's write our simple neural network code: ",(0,r.kt)("inlineCode",{parentName:"p"},"basic_nn.py")),(0,r.kt)("p",null,"Notice that even before we've built and linked all of the related ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," components together we are referencing the\nparameters we have defined in our ",(0,r.kt)("inlineCode",{parentName:"p"},"spock")," class. Below we are passing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelConfig")," class as a parameter\n",(0,r.kt)("inlineCode",{parentName:"p"},"model_config")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"__init__")," function where we can then access the parameters with ",(0,r.kt)("inlineCode",{parentName:"p"},".")," notation (if we import\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelConfig")," class here and add it as a type hint to ",(0,r.kt)("inlineCode",{parentName:"p"},"model_config")," most IDE auto-complete will work out of the\nbox). We could have also passed in individual parameters instead if that is the preferred syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import torch.nn as nn\n\nclass BasicNet(nn.Module):\n    def __init__(self, model_config):\n        super(BasicNet, self).__init__()\n        # Make a dictionary of activation functions to select from\n        self.act_fncs = {'relu': nn.ReLU, 'gelu': nn.GELU, 'tanh': nn.Tanh}\n        self.use_act = self.act_fncs.get(model_config.activation)()\n        # Define the layers manually (avoiding list comprehension for clarity)\n        self.layer_1 = nn.Linear(model_config.n_features, model_config.hidden_sizes[0])\n        self.layer_2 = nn.Linear(model_config.hidden_sizes[0], model_config.hidden_sizes[1])\n        self.layer_3 = nn.Linear(model_config.hidden_sizes[1], model_config.hidden_sizes[2])\n        # Define some dropout layers\n        self.dropout_1 = nn.Dropout(model_config.dropout[0])\n        self.dropout_2 = nn.Dropout(model_config.dropout[1])\n        # Define the output layer\n        self.softmax = nn.Softmax(dim=1)\n\n    def forward(self, x):\n        # x is the data input\n        # Layer 1\n        # Linear\n        x = self.layer_1(x)\n        # Activation\n        x = self.use_act(x)\n        # Dropout\n        x = self.dropout_1(x)\n        # Layer 2\n        # Linear\n        x = self.layer_2(x)\n        # Activation\n        x = self.use_act(x)\n        # Dropout\n        x = self.dropout_2(x)\n        # Layer 3\n        # Linear\n        x = self.layer_3(x)\n        # Softmax\n        output = self.softmax(x)\n        return output\n")))}u.isMDXComponent=!0}}]);