"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[8845],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=o(a),c=l,m=d["".concat(s,".").concat(c)]||d[c]||k[c]||r;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var o=2;o<r;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4026:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),i=["components"],p={sidebar_label:"typed",title:"backend.typed"},s=void 0,o={unversionedId:"reference/backend/typed",id:"reference/backend/typed",isDocsHomePage:!1,title:"backend.typed",description:"Handles the definitions of arguments types for Spock (backend: attrs)",source:"@site/docs/reference/backend/typed.md",sourceDirName:"reference/backend",slug:"/reference/backend/typed",permalink:"/spock/reference/backend/typed",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/typed.md",tags:[],version:"current",frontMatter:{sidebar_label:"typed",title:"backend.typed"},sidebar:"api",previous:{title:"spaces",permalink:"/spock/reference/backend/spaces"},next:{title:"utils",permalink:"/spock/reference/backend/utils"}},u=[{value:"SavePath Objects",id:"savepath-objects",children:[]}],k={toc:u};function d(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Handles the definitions of arguments types for Spock (backend: attrs)"),(0,r.kt)("h2",{id:"savepath-objects"},"SavePath Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class SavePath(str)\n")),(0,r.kt)("p",null,"Spock special key for saving the Spock config to file"),(0,r.kt)("p",null,"Defines a special key use to save the current Spock config to file"),(0,r.kt)("h4",{id:"_extract_base_type"},"_","extract","_","base","_","type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _extract_base_type(typed)\n")),(0,r.kt)("p",null,"Extracts the name of the type from a _GenericAlias"),(0,r.kt)("p",null,"Assumes that the derived types are only of length 1 as the ",(0,r.kt)("strong",{parentName:"p"},"args")," are ","[0]","\nrecursed... this is not true for\ntuples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  name of type"),(0,r.kt)("h4",{id:"_recursive_generic_validator"},"_","recursive","_","generic","_","validator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _recursive_generic_validator(typed)\n")),(0,r.kt)("p",null,"Recursively assembles the validators for nested generic types"),(0,r.kt)("p",null,"Walks through the nested type structure and determines whether to recurse all the\nway to a base type. Once it\nhits the base type it bubbles up the correct validator that is nested within the\nupper validator"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - input type")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return_type")," - recursively built deep_iterable validators")),(0,r.kt)("h4",{id:"_generic_alias_katra"},"_","generic","_","alias","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _generic_alias_katra(typed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a subscripted generic_alias katra"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using\nattrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples),\nhandles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,"Handles: List","[type]",", Tuple","[type]",", Dict","[type]"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"_check_enum_props"},"_","check","_","enum","_","props"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _check_enum_props(typed)\n")),(0,r.kt)("p",null,"Handles properties of enums"),(0,r.kt)("p",null,"Checks if all types of the enum are the same and assembles a list of allowed values"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of parameter (Enum)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_type")," - the base type of the Enum"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowed")," - List of allowed values of the Enum")),(0,r.kt)("h4",{id:"_enum_katra"},"_","enum","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_katra(typed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a Enum typed katra"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using\nattrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples),\nhandles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"_cast_enum_default"},"_","cast","_","enum","_","default"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _cast_enum_default(default)\n")),(0,r.kt)("p",null,"Allows the enum default to be the specific value or the Enum structured value"),(0,r.kt)("p",null,"Checks if enum type and extracts the value from the Enum"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  default value or the Enum extracted value"),(0,r.kt)("h4",{id:"_enum_base_katra"},"_","enum","_","base","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_base_katra(typed, base_type, allowed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a base Enum typed katra"),(0,r.kt)("p",null,"Here we handle the base types of enums that allows us to force a type check on\nthe instance"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using\nattrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples),\nhandles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_type")," - underlying base type"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowed")," - set of allowed values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"_enum_class_katra"},"_","enum","_","class","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_class_katra(typed, allowed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a base Enum typed katra"),(0,r.kt)("p",null,"Here we handle the class based types of enums. Seeing as these classes are\ngenerated dynamically we cannot\nforce type checking of a specific instance however the in_ validator will\ncatch an incorrect instance type"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using\nattrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples),\nhandles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowed")," - set of allowed values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"_type_katra"},"_","type","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _type_katra(typed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a simple typed katra"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using\nattrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples),\nhandles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,"Handles: bool, string, float, int, List, and Tuple"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"_handle_optional_typing"},"_","handle","_","optional","_","typing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_optional_typing(typed)\n")),(0,r.kt)("p",null,"Handles when a type hint is Optional"),(0,r.kt)("p",null,"Handles Optional","[type]"," typing and strips out the base type to pass back to the creation of a katra which needs base\ntyping"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - type")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - type (modified if Optional)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - boolean for katra creation")),(0,r.kt)("h4",{id:"_callable_katra"},"_","callable","_","katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _callable_katra(typed, default=None, optional=False)\n")),(0,r.kt)("p",null,"Private interface to create a Callable katra"),(0,r.kt)("p",null,"Here we handle the callable type katra that allows us to force a callable check on the value provided"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,"Handles: callable"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional")," - whether to make the parameter optional or not (thus allowing None)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")),(0,r.kt)("h4",{id:"katra"},"katra"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def katra(typed, default=None)\n")),(0,r.kt)("p",null,"Public interface to create a katra"),(0,r.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,r.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typed")," - the type of the parameter to define"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," - the default value to assign if given")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")))}d.isMDXComponent=!0}}]);