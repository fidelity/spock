"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[8458],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,m=d["".concat(p,".").concat(k)]||d[k]||c[k]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3350:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=["components"],o={sidebar_label:"handlers",title:"handlers"},p=void 0,s={unversionedId:"reference/handlers",id:"reference/handlers",isDocsHomePage:!1,title:"handlers",description:"I/O handlers for various file formats",source:"@site/docs/reference/handlers.md",sourceDirName:"reference",slug:"/reference/handlers",permalink:"/spock/reference/handlers",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/handlers.md",tags:[],version:"current",frontMatter:{sidebar_label:"handlers",title:"handlers"},sidebar:"api",previous:{title:"graph",permalink:"/spock/reference/graph"},next:{title:"helpers",permalink:"/spock/reference/helpers"}},u=[{value:"Handler Objects",id:"handler-objects",children:[]},{value:"YAMLHandler Objects",id:"yamlhandler-objects",children:[]},{value:"TOMLHandler Objects",id:"tomlhandler-objects",children:[]},{value:"JSONHandler Objects",id:"jsonhandler-objects",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I/O handlers for various file formats"),(0,r.kt)("h2",{id:"handler-objects"},"Handler Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Handler(ABC)\n")),(0,r.kt)("p",null,"Base class for file type loaders"),(0,r.kt)("p",null,"ABC for loaders"),(0,r.kt)("h4",{id:"load"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def load(path: Path, s3_config: Optional[_T] = None) -> Dict\n")),(0,r.kt)("p",null,"Load function for file type"),(0,r.kt)("p",null,"This handles s3 path conversion for all handler types pre load call"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional s3 config object if using s3 storage")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  dictionary of read file"),(0,r.kt)("h4",{id:"_post_process_config_paths"},"_","post","_","process","_","config","_","paths"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _post_process_config_paths(payload)\n")),(0,r.kt)("p",null,"Transform path string into path object"),(0,r.kt)("h4",{id:"_load"},"_","load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _load(path: str) -> Dict\n")),(0,r.kt)("p",null,"Private load function for file type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  dictionary of read file"),(0,r.kt)("h4",{id:"_write_crypto"},"_","write","_","crypto"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _write_crypto(value: Union[str, ByteString], path: Path, name: str, crypto_name: str, create_path: bool, s3_config: Optional[_T])\n")),(0,r.kt)("p",null,"Write values of the underlying cryptography data used to encode some spock values"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," - current crypto attribute"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - spock generated file name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_path")," - boolean to create the path if non-existent (for non S3)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional s3 config object if using s3 storage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"crypto_name")," - name of the crypto attribute")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  None"),(0,r.kt)("h4",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def save(out_dict: Dict, info_dict: Optional[Dict], library_dict: Optional[Dict], path: Path, name: str, create_path: bool = False, s3_config: Optional[_T] = None, salt: Optional[str] = None, key: Optional[ByteString] = None)\n")),(0,r.kt)("p",null,"Write function for file type"),(0,r.kt)("p",null,"This will handle local or s3 writes with the boolean is_s3 flag. If detected it will conditionally import\nthe necessary addons to handle the upload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"out_dict")," - payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library_dict")," - package info to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - spock generated file name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_path")," - boolean to create the path if non-existent (for non S3)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional s3 config object if using s3 storage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt")," - string of the salt used for crypto"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ByteString of the key used for crypto")),(0,r.kt)("h4",{id:"_check_s3_write"},"_","check","_","s3","_","write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _check_s3_write(write_path: str, path: Path, name: str, s3_config: Optional[_T])\n")),(0,r.kt)("p",null,"Handles writing to S3 if necessary"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"write_path")," - path the file was written to locally"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - original path specified"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - original file name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional s3 config object if using s3 storage")),(0,r.kt)("h4",{id:"_save"},"_","save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _save(out_dict: Dict, info_dict: Optional[Dict], library_dict: Optional[Dict], path: str) -> str\n")),(0,r.kt)("p",null,"Write function for file type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"out_dict")," - payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library_dict")," - package info to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out")),(0,r.kt)("h4",{id:"_handle_possible_s3_load_path"},"_","handle","_","possible","_","s3","_","load","_","path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_possible_s3_load_path(path: Path, s3_config: Optional[_T] = None) -> Union[str, Path]\n")),(0,r.kt)("p",null,"Handles the possibility of having to handle loading from a S3 path"),(0,r.kt)("p",null,"Checks to see if it detects a S3 uri and if so triggers imports of s3 functionality and handles the file\ndownload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - spock config path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional s3 configuration object")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - current path for the configuration file")),(0,r.kt)("h4",{id:"_handle_possible_s3_save_path"},"_","handle","_","possible","_","s3","_","save","_","path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_possible_s3_save_path(path: Path, name: str, create_path: bool, s3_config: Optional[_T] = None) -> Tuple[str, bool]\n")),(0,r.kt)("p",null,"Handles the possibility of having to save to a S3 path"),(0,r.kt)("p",null,"Checks to see if it detects a S3 uri and if so generates a tmp location to write the file to pre-upload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - save path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - spock generated file name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_path")," - create the path for non s3 data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - s3 config object")),(0,r.kt)("h4",{id:"write_extra_info"},"write","_","extra","_","info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@staticmethod\ndef write_extra_info(path: str, info_dict: Dict, version: bool = True, write_mode: str = "w+", newlines: Optional[int] = None, header: Optional[str] = None)\n')),(0,r.kt)("p",null,"Writes extra info to commented newlines"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," - write the spock version string first"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"write_mode")," - write mode for the file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newlines")," - number of new lines to add to start")),(0,r.kt)("h2",{id:"yamlhandler-objects"},"YAMLHandler Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class YAMLHandler(Handler)\n")),(0,r.kt)("p",null,"YAML class for loading YAML config files"),(0,r.kt)("p",null,"Base YAML class"),(0,r.kt)("h4",{id:"_load-1"},"_","load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> Dict\n")),(0,r.kt)("p",null,"YAML load function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to YAML file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_payload")," - dictionary of read file")),(0,r.kt)("h4",{id:"_save-1"},"_","save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: Dict, info_dict: Optional[Dict], library_dict: Optional[Dict], path: str) -> str\n")),(0,r.kt)("p",null,"Write function for YAML type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"out_dict")," - payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library_dict")," - package info to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out")),(0,r.kt)("h2",{id:"tomlhandler-objects"},"TOMLHandler Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class TOMLHandler(Handler)\n")),(0,r.kt)("p",null,"TOML class for loading TOML config files"),(0,r.kt)("p",null,"Base TOML class"),(0,r.kt)("h4",{id:"_load-2"},"_","load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> Dict\n")),(0,r.kt)("p",null,"TOML load function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to TOML file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_payload")," - dictionary of read file")),(0,r.kt)("h4",{id:"_save-2"},"_","save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: Dict, info_dict: Optional[Dict], library_dict: Optional[Dict], path: str) -> str\n")),(0,r.kt)("p",null,"Write function for TOML type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"out_dict")," - payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library_dict")," - package info to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out")),(0,r.kt)("h2",{id:"jsonhandler-objects"},"JSONHandler Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class JSONHandler(Handler)\n")),(0,r.kt)("p",null,"JSON class for loading JSON config files"),(0,r.kt)("p",null,"Base JSON class"),(0,r.kt)("h4",{id:"_load-3"},"_","load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> Dict\n")),(0,r.kt)("p",null,"JSON load function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to JSON file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_payload")," - dictionary of read file")),(0,r.kt)("h4",{id:"_save-3"},"_","save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: Dict, info_dict: Optional[Dict], library_dict: Optional[Dict], path: str) -> str\n")),(0,r.kt)("p",null,"Write function for JSON type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"out_dict")," - payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_dict")," - info payload to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library_dict")," - package info to write"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to write out")))}d.isMDXComponent=!0}}]);