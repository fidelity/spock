"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[5410],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),g=r,k=m["".concat(o,".").concat(g)]||m[g]||c[g]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9088:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],s={sidebar_label:"args",title:"args"},o=void 0,p={unversionedId:"reference/args",id:"reference/args",isDocsHomePage:!1,title:"args",description:"Handles mapping config arguments to a payload with both general and class specific sets",source:"@site/docs/reference/args.md",sourceDirName:"reference",slug:"/reference/args",permalink:"/spock/reference/args",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/args.md",tags:[],version:"current",frontMatter:{sidebar_label:"args",title:"args"},sidebar:"api",previous:{title:"tuner",permalink:"/spock/reference/addons/tune/tuner"},next:{title:"builder",permalink:"/spock/reference/backend/builder"}},u=[{value:"SpockArguments Objects",id:"spockarguments-objects",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles mapping config arguments to a payload with both general and class specific sets"),(0,l.kt)("h2",{id:"spockarguments-objects"},"SpockArguments Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class SpockArguments()\n")),(0,l.kt)("p",null,"Class that handles mapping the read parameter dictionary to general or class level arguments"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_arguments")," - dictionary of arguments")),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(arguments: Dict, config_dag: Graph)\n")),(0,l.kt)("p",null,"Init call for SpockArguments class"),(0,l.kt)("p",null,"Handles creating a clean arguments dictionary that can be cleanly mapped to spock classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arguments")," - dictionary of parameters from the config file(s)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config_dag")," - graph of the dependencies between spock classes")),(0,l.kt)("h4",{id:"__getitem__"},"_","_","getitem","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __getitem__(key: str) -> Any\n")),(0,l.kt)("p",null,"Gets value from the _arguments dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," - dictionary key")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  argument at the specified key"),(0,l.kt)("h4",{id:"__iter__"},"_","_","iter","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __iter__() -> Iterable[str]\n")),(0,l.kt)("p",null,"Returns the next value of the keys within the _arguments dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  current key for the _arguments dictionary"),(0,l.kt)("h4",{id:"items"},"items"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef items()\n")),(0,l.kt)("p",null,"Returns the k,v tuple iterator for the _arguments dictionary"),(0,l.kt)("h4",{id:"keys"},"keys"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef keys()\n")),(0,l.kt)("p",null,"Returns an iterator for the keys of the _arguments dictionary"),(0,l.kt)("h4",{id:"values"},"values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef values()\n")),(0,l.kt)("p",null,"Returns an iterator for the values of the _arguments dictionary"),(0,l.kt)("h4",{id:"_get_general_arguments"},"_","get","_","general","_","arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_general_arguments(arguments: Dict, config_dag: Graph) -> Dict\n")),(0,l.kt)("p",null,"Creates a dictionary of config file parameters that are defined at the\ngeneral level (not class specific)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arguments")," - dictionary of parameters from the config file(s)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config_dag")," - graph of the dependencies between spock classes")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of general level parameters"),(0,l.kt)("h4",{id:"_attribute_name_to_config_name_mapping"},"_","attribute","_","name","_","to","_","config","_","name","_","mapping"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _attribute_name_to_config_name_mapping(config_dag: Graph, general_arguments: Dict) -> Dict\n")),(0,l.kt)("p",null,"Returns a mapping of names to spock config class parameter names"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config_dag")," - graph of the dependencies between spock classes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"general_arguments")," - dictionary of arguments at the general level")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of parameters mapped to spock classes"),(0,l.kt)("h4",{id:"_is_duplicated_key"},"_","is","_","duplicated","_","key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _is_duplicated_key(attribute_name_to_config_name_mapping: Dict, attr_name: str, config_name: str) -> bool\n")),(0,l.kt)("p",null,"Checks if a duplicated key exists in multiple classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"attribute_name_to_config_name_mapping")," - dictionary of class specific name mappings\nattr_name:\nconfig_name:")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if duplicated"),(0,l.kt)("h4",{id:"_assign_general_arguments_to_config"},"_","assign","_","general","_","arguments","_","to","_","config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _assign_general_arguments_to_config(general_arguments: Dict, attribute_name_to_config_name_mapping: Dict) -> None\n")),(0,l.kt)("p",null,"Assigns the values from general definitions to values within specific\nclasses if the specific definition doesn","'","t exist"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  general_arguments:\nattribute_name_to_config_name_mapping:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  None"),(0,l.kt)("h4",{id:"_clean_arguments"},"_","clean","_","arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _clean_arguments(arguments: Dict, general_arguments: Dict) -> Dict\n")),(0,l.kt)("p",null,"Sets up a clean dictionary for those not in the general dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arguments")," - dictionary of all arguments"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"general_arguments")," - dictionary of general level arguments")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  clean dictionary of parameters not at the general level"))}m.isMDXComponent=!0}}]);